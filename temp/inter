#include "header.h"
/**
 * prompt - prompt
*/
void prompt(void)
{
char prompt_str[] = "$ ";
write(STDOUT_FILENO, prompt_str, sizeof(prompt_str) - 1);
}

/**
 * execute_command - executes the command
 * @info: pointer
*/
void execute_command(info_t *info)

{
	pid_t pid;
	int status;
	pid = fork();
	if (pid == -1)
	{
		perror("fork");
		exit(EXIT_FAILURE);
	}
	if (pid == 0)
	{
	if (execve(info->path, info->argv, info->environ) == -1)
	{
		perror("execve");
		exit(EXIT_FAILURE);
	}
	else
	{
		waitpid(pid, &status, 0);
		info->status = WEXITSTATUS(status);
	}
}

/**
 * main - entry point
 * @argc: argiment count
 * @argv: argument vector
 * Return: exit
*/
int main(__attribute__((unused)) int argc, __attribute__((unused)) char **argv)
{
info_t info = INFO_INIT;
char *input;
while (1)

{
if
(isatty(STDIN_FILENO))
{
prompt();
}
input = getline();
if (input[0] == '\0')
{

free(input);
continue;
}
find_cmd(&info);
execute_command(&info);
free(input);
}
return (0);
}
